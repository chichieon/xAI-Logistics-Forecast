# xAI-Logistics-Forecast 프로젝트 Cursor Rules

## 코드 스타일 규칙

### Python 코드 규칙
- PEP 8 스타일 가이드를 따릅니다
- 들여쓰기는 4 스페이스를 사용합니다
- 최대 줄 길이는 88자로 제한합니다 (Black 포맷터 기준)
- 함수와 클래스는 명확한 docstring을 포함해야 합니다
- 변수와 함수명은 snake_case를 사용합니다
- 클래스명은 PascalCase를 사용합니다
- 상수는 UPPER_CASE를 사용합니다

### 프로젝트 구조
- 모듈화된 구조를 사용합니다
- 관련 기능은 동일한 디렉토리에 그룹화합니다
- 설정 파일은 config/ 디렉토리에 저장합니다
- 데이터 처리 관련 코드는 data/ 디렉토리에 저장합니다
- 모델 관련 코드는 models/ 디렉토리에 저장합니다
- 대시보드 관련 코드는 dashboard/ 디렉토리에 저장합니다

## 개발 워크플로우

### 버전 관리
- 기능 개발은 feature/ 접두사를 가진 브랜치에서 수행합니다
- 버그 수정은 bugfix/ 접두사를 가진 브랜치에서 수행합니다
- 커밋 메시지는 명확하고 설명적이어야 합니다
- 커밋 메시지는 "feat:", "fix:", "docs:", "refactor:" 등의 접두사를 사용합니다

### 코드 리뷰
- 모든 코드 변경은 리뷰를 거쳐야 합니다
- 코드 리뷰는 기능성, 가독성, 성능을 중점적으로 평가합니다
- 리뷰어는 건설적인 피드백을 제공해야 합니다

## 테스트 규칙

### 테스트 요구사항
- 모든 새로운 기능은 단위 테스트를 포함해야 합니다
- 테스트 커버리지는 최소 80%를 유지해야 합니다
- 테스트는 pytest를 사용합니다
- 모든 테스트는 독립적이고 반복 가능해야 합니다

### 테스트 구조
- 테스트 파일은 tests/ 디렉토리에 저장합니다
- 테스트 파일명은 test_*.py 형식을 따릅니다
- 각 모듈에 대한 테스트는 해당 모듈과 동일한 구조를 따릅니다

## 문서화 규칙

### 코드 문서화
- 모든 함수와 클래스는 명확한 docstring을 포함해야 합니다
- docstring은 Google 스타일을 따릅니다
- 복잡한 로직은 인라인 주석을 추가합니다

### 프로젝트 문서화
- README.md는 프로젝트 개요, 설치 방법, 사용 방법을 포함합니다
- API 문서는 자동 생성 도구를 사용합니다
- 사용자 매뉴얼은 docs/ 디렉토리에 저장합니다

## 데이터 처리 규칙

### 데이터 보안
- 민감한 데이터는 암호화하여 저장합니다
- API 키와 비밀번호는 환경 변수나 안전한 저장소를 통해 관리합니다
- 사용자 데이터는 최소한으로 수집하고 처리합니다

### 데이터 품질
- 모든 입력 데이터는 검증 과정을 거쳐야 합니다
- 결측값과 이상치 처리 방법을 명확하게 문서화합니다
- 데이터 전처리 과정은 재현 가능해야 합니다

## 배포 규칙

### 환경 설정
- 개발, 테스트, 프로덕션 환경을 명확하게 분리합니다
- 각 환경에 대한 설정 파일을 관리합니다
- 환경 간 이동이 쉽도록 설정합니다

### 배포 프로세스
- 배포 전 모든 테스트가 통과해야 합니다
- 배포는 자동화된 파이프라인을 통해 수행합니다
- 롤백 전략을 준비합니다

## 성능 최적화 규칙

### 코드 최적화
- 성능 병목 현상을 정기적으로 프로파일링합니다
- 대규모 데이터 처리는 효율적인 알고리즘을 사용합니다
- 메모리 사용량을 모니터링하고 최적화합니다

### 쿼리 최적화
- BigQuery 쿼리는 비용과 성능을 고려하여 최적화합니다
- 자주 사용되는 쿼리는 캐싱 전략을 적용합니다
- 대규모 데이터셋에 대한 쿼리는 파티셔닝을 활용합니다 
